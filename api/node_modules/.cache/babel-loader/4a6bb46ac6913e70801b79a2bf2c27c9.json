{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import axios from \"axios\";\nimport { useState, useContext } from \"react\";\nimport { AuthContext } from \"./AuthContext.js\";\nexport const RegisterContext = () => {\n  _s();\n\n  const [errors, setErrors] = useState(null);\n  const [isloading, setIsloading] = useState(null);\n  const {\n    dispatch\n  } = useContext(AuthContext);\n\n  const register = async (username, email, password, city, phone, country) => {\n    setIsloading(true);\n    setErrors(null);\n    const response = await fetch('/auth/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        email,\n        password,\n        city,\n        phone,\n        country\n      })\n    });\n    const json = await response.json();\n\n    if (response.ok) {\n      setIsloading(false);\n      setErrors(json.errors);\n    }\n\n    if (response.ok) {\n      localStorage.setItem('user', JSON.stringify(json));\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: json\n      });\n      setIsloading(false);\n    }\n  };\n\n  return {\n    register,\n    isloading,\n    errors\n  };\n}; // export default RegisterContext\n\n_s(RegisterContext, \"uXAtFbMNX3+gdxMfWdTPJgkkb6g=\");\n\n_c = RegisterContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterContext\");","map":{"version":3,"sources":["D:/react js/youtube2022-mern-booking/client/src/context/RegisterContext.js"],"names":["useState","useContext","AuthContext","RegisterContext","errors","setErrors","isloading","setIsloading","dispatch","register","username","email","password","city","phone","country","response","fetch","method","headers","body","JSON","stringify","json","ok","localStorage","setItem","type","payload"],"mappings":";;AAAA;AACA,SAASA,QAAT,EAAkBC,UAAlB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEC,OAAO,MAAMC,eAAe,GAAC,MAAI;AAAA;;AAE9B,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAmBL,QAAQ,CAAC,IAAD,CAAjC;AACA,QAAK,CAACM,SAAD,EAAWC,YAAX,IAAyBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAGQ,IAAAA;AAAH,MAAgBP,UAAU,CAACC,WAAD,CAAhC;;AACJ,QAAMO,QAAQ,GAAG,OAAMC,QAAN,EAAeC,KAAf,EAAqBC,QAArB,EAA8BC,IAA9B,EAAmCC,KAAnC,EAAyCC,OAAzC,KAAmD;AAChER,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAF,IAAAA,SAAS,CAAC,IAAD,CAAT;AACA,UAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAD,EAAkB;AAC1CC,MAAAA,MAAM,EAAC,MADmC;AAE1CC,MAAAA,OAAO,EAAC;AAAC,wBAAe;AAAhB,OAFkC;AAG1CC,MAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;AAACZ,QAAAA,QAAD;AAAUC,QAAAA,KAAV;AAAgBC,QAAAA,QAAhB;AAAyBC,QAAAA,IAAzB;AAA8BC,QAAAA,KAA9B;AAAoCC,QAAAA;AAApC,OAAf;AAHqC,KAAlB,CAA5B;AAKA,UAAMQ,IAAI,GAAC,MAAMP,QAAQ,CAACO,IAAT,EAAjB;;AACA,QAAGP,QAAQ,CAACQ,EAAZ,EAAe;AACXjB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,MAAAA,SAAS,CAACkB,IAAI,CAACnB,MAAN,CAAT;AACH;;AACD,QAAGY,QAAQ,CAACQ,EAAZ,EAAe;AACXC,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA4BL,IAAI,CAACC,SAAL,CAAeC,IAAf,CAA5B;AACAf,MAAAA,QAAQ,CAAC;AAACmB,QAAAA,IAAI,EAAE,eAAP;AAAuBC,QAAAA,OAAO,EAACL;AAA/B,OAAD,CAAR;AACAhB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,GAlBD;;AAmBA,SAAM;AAACE,IAAAA,QAAD;AAAUH,IAAAA,SAAV;AAAoBF,IAAAA;AAApB,GAAN;AACC,CAzBO,C,CA0BR;;GA1BcD,e;;KAAAA,e","sourcesContent":["// import axios from \"axios\";\r\nimport { useState,useContext } from \"react\";\r\nimport { AuthContext } from \"./AuthContext.js\";\r\n\r\n export const RegisterContext=()=>{\r\n    \r\n    const [errors,setErrors]=useState(null)\r\n    const[isloading,setIsloading]=useState(null)\r\n    const {  dispatch } = useContext(AuthContext);\r\nconst register = async(username,email,password,city,phone,country)=>{\r\n    setIsloading(true)\r\n    setErrors(null)\r\n    const response = await fetch('/auth/register',{\r\n        method:'POST',\r\n        headers:{'Content-Type':'application/json'},\r\n        body:JSON.stringify({username,email,password,city,phone,country})\r\n    })\r\n    const json=await response.json()\r\n    if(response.ok){\r\n        setIsloading(false)\r\n        setErrors(json.errors)\r\n    }\r\n    if(response.ok){\r\n        localStorage.setItem('user',JSON.stringify(json))\r\n        dispatch({type: \"LOGIN_SUCCESS\",payload:json})\r\n        setIsloading(false)\r\n    }\r\n}\r\nreturn{register,isloading,errors}\r\n}\r\n// export default RegisterContext"]},"metadata":{},"sourceType":"module"}